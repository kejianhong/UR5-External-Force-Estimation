#include "UR5Simulation/UR5SimulationModel.h"

#include <boost/math/special_functions/sign.hpp>

using namespace std;

UR5::UR5() : RobotDynamicsRnea(), tau(Vector(UR5DOF)), fric(Vector(UR5DOF)), baseParmSet1(Vector(baseParamSet1Size)), baseParmSet2(Vector(baseParamSet2Size)), jacobian(Matrix::Zero(6, UR5DOF)), forceTransformMatrix(Matrix::Zero(6, 6)) {
  tau.setZero();
  fric.setZero();
  baseParmSet1.setZero();
  baseParmSet2.setZero();
  initBaseParameterSet();
}

Vector UR5::rnea(Vector &q, Vector &qd, Vector &qdd, double g) {
  Matrix phi = regressorMatrix(q, qd, qdd, g);
  tau = phi * baseParmSet1;
  return tau;
}

Vector UR5::getFriction(Vector &qd) {
  // // offset for friction
  // vector<double> offset = {0, 7, 3, 1, 1, 0};
  // // vector<double> offset = {0, 0, 0, 0, 0, 0};
  // for (int i = 0; i < UR5DOF; ++i)
  // {
  //     fric[i] = (baseParmSet2[i] * boost::math::sign(qd[i])
  //             + baseParmSet2[6 + i] * qd[i]
  //             + baseParmSet2[12 + i] * boost::math::sign(qd[i]) * exp(-baseParmSet2[18+i] * fabs(qd[i])))
  //             + offset[i];
  // }

  // 对仿真来说,摩擦力为0
  return fric;
}

int UR5::jointNo() {
  return UR5DOF;
}

Matrix UR5::getVelocityJacobianEndEffector(const Vector &q) {
  double q1 = q(0), q2 = q(1), q3 = q(2), q4 = q(3), q5 = q(4), q6 = q(5);
  jacobian.setZero();

  jacobian(0, 0) = 0.0823 * pow(sin(q5), 2) * cos(q6) * cos(q2 + q3 + q4) - 0.1215 * sin(q5) * sin(q2 + q3 + q4) * cos(q6) + 0.425 * sin(q5) * cos(q2) * cos(q6) + 0.39225 * sin(q5) * cos(q6) * cos(q2 + q3) - 0.10915 * sin(q6) * sin(q2 + q3 + q4) + 0.02685 * sin(q5 + q6) * sin(q2 + q3 + q4) + 0.0823 * pow(cos(q5), 2) * cos(q6) * cos(q2 + q3 + q4) + 0.10915 * cos(q5) * cos(q2 + q3 + q4 + q6);
  jacobian(1, 0) = -0.0823 * pow(sin(q5), 2) * sin(q6) * cos(q2 + q3 + q4) + 0.01235 * sin(q5) * sin(q6) * sin(q2 + q3 + q4) - 0.425 * sin(q5) * sin(q6) * cos(q2) - 0.39225 * sin(q5) * sin(q6) * cos(q2 + q3) - 0.0823 * sin(q6) * pow(cos(q5), 2) * cos(q2 + q3 + q4) - 0.10915 * sin(q6) * cos(q5) * cos(q2 + q3 + q4) - 0.10915 * sin(q2 + q3 + q4) * cos(q6) - 0.0823 * sin(q2 + q3 + q4) * cos(q5 + q6);
  jacobian(2, 0) = 0.0145 * sin(q2 + q3 + q4) * cos(q5) - 0.10915 * sin(q2 + q3 + q4 + q5) + 0.425 * cos(q2) * cos(q5) + 0.39225 * cos(q5) * cos(q2 + q3);
  ;
  jacobian(3, 0) = sin(q6) * cos(q2 + q3 + q4) + sin(q2 + q3 + q4) * cos(q5) * cos(q6);
  ;
  jacobian(4, 0) = -sin(q6) * sin(q2 + q3 + q4) * cos(q5) + cos(q6) * cos(q2 + q3 + q4);
  ;
  jacobian(5, 0) = -sin(q5) * sin(q2 + q3 + q4);

  jacobian(0, 1) = 0.01235 * pow(sin(q4), 2) * sin(q5) * sin(q6) + 0.09465 * pow(sin(q4), 2) * cos(q5 + q6) - 0.39225 * sin(q4) * cos(q5) * cos(q6) + 0.01235 * sin(q5) * sin(q6) * pow(cos(q4), 2) - 0.39225 * sin(q6) * cos(q4) - 0.425 * sin(q6) * cos(q3 + q4) - 0.425 * sin(q3 + q4) * cos(q5) * cos(q6) + 0.09465 * pow(cos(q4), 2) * cos(q5 + q6);
  jacobian(1, 1) = -0.01235 * pow(sin(q4), 2) * sin(q6) * cos(q5) - 0.0823 * pow(sin(q4), 2) * sin(q5 + q6) + 0.39225 * sin(q4) * sin(q6) * cos(q5) + 0.425 * sin(q6) * sin(q3 + q4) * cos(q5) - 0.01235 * sin(q6) * pow(cos(q4), 2) * cos(q5) - 0.0823 * sin(q5 + q6) * pow(cos(q4), 2) - 0.39225 * cos(q4) * cos(q6) - 0.425 * cos(q6) * cos(q3 + q4);
  jacobian(2, 1) = (-0.09465 * pow(sin(q4), 2) + 0.39225 * sin(q4) + 0.425 * sin(q3 + q4) - 0.09465 * pow(cos(q4), 2)) * sin(q5);
  jacobian(3, 1) = sin(q5) * cos(q6);
  jacobian(4, 1) = -sin(q5) * sin(q6);
  jacobian(5, 1) = cos(q5);

  jacobian(0, 2) = -0.39225 * sin(q4) * cos(q5) * cos(q6) + 0.01235 * sin(q5) * sin(q6) - 0.39225 * sin(q6) * cos(q4) + 0.09465 * cos(q5 + q6);
  jacobian(1, 2) = 0.39225 * sin(q4) * sin(q6) * cos(q5) + 0.01235 * sin(q5) * cos(q6) - 0.09465 * sin(q5 + q6) - 0.39225 * cos(q4) * cos(q6);
  jacobian(2, 2) = (0.39225 * sin(q4) - 0.09465) * sin(q5);
  jacobian(3, 2) = sin(q5) * cos(q6);
  jacobian(4, 2) = -sin(q5) * sin(q6);
  jacobian(5, 2) = cos(q5);

  jacobian(0, 3) = 0.01235 * sin(q5) * sin(q6) + 0.09465 * cos(q5 + q6);
  jacobian(1, 3) = 0.01235 * sin(q5) * cos(q6) - 0.09465 * sin(q5 + q6);
  jacobian(2, 3) = -0.09465 * sin(q5);
  jacobian(3, 3) = sin(q5) * cos(q6);
  jacobian(4, 3) = -sin(q5) * sin(q6);
  jacobian(5, 3) = cos(q5);

  jacobian(0, 4) = -0.0823 * cos(q6);
  jacobian(1, 4) = 0.0823 * sin(q6);
  jacobian(2, 4) = 0;
  jacobian(3, 4) = -sin(q6);
  jacobian(4, 4) = -cos(q6);
  jacobian(5, 4) = 0;

  jacobian(0, 5) = 0;
  jacobian(1, 5) = 0;
  jacobian(2, 5) = 0;
  jacobian(3, 5) = 0;
  jacobian(4, 5) = 0;
  jacobian(5, 5) = 1;

  return jacobian;
}

Matrix UR5::getVelocityJacobianBase(const Vector &q) {
  double q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3], q5 = q[4], q6 = q[5];
  jacobian.setZero();
  jacobian(0, 0) = 0.0823 * sin(q1) * sin(q5) * cos(q2 + q3 + q4) - 0.09465 * sin(q1) * sin(q2 + q3 + q4) + 0.425 * sin(q1) * cos(q2) + 0.39225 * sin(q1) * cos(q2 + q3) + 0.0823 * cos(q1) * cos(q5) + 0.10915 * cos(q1);
  jacobian(1, 0) = 0.0823 * sin(q1) * cos(q5) + 0.10915 * sin(q1) - 0.0823 * sin(q5) * cos(q1) * cos(q2 + q3 + q4) + 0.09465 * sin(q2 + q3 + q4) * cos(q1) - 0.425 * cos(q1) * cos(q2) - 0.39225 * cos(q1) * cos(q2 + q3);
  jacobian(2, 0) = 0;
  jacobian(3, 0) = 0;
  jacobian(4, 0) = 0;
  jacobian(5, 0) = 1;

  jacobian(0, 1) = (0.425 * sin(q2) + 0.0823 * sin(q5) * sin(q2 + q3 + q4) + 0.39225 * sin(q2 + q3) + 0.09465 * cos(q2 + q3 + q4)) * cos(q1);
  jacobian(1, 1) = (0.425 * sin(q2) + 0.0823 * sin(q5) * sin(q2 + q3 + q4) + 0.39225 * sin(q2 + q3) + 0.09465 * cos(q2 + q3 + q4)) * sin(q1);
  jacobian(2, 1) = -0.0823 * sin(q5) * cos(q2 + q3 + q4) + 0.09465 * sin(q2 + q3 + q4) - 0.425 * cos(q2) - 0.39225 * cos(q2 + q3);
  jacobian(3, 1) = sin(q1);
  jacobian(4, 1) = -cos(q1);
  jacobian(5, 1) = 0;

  jacobian(0, 2) = (0.0823 * sin(q5) * sin(q2 + q3 + q4) + 0.39225 * sin(q2 + q3) + 0.09465 * cos(q2 + q3 + q4)) * cos(q1);
  jacobian(1, 2) = (0.0823 * sin(q5) * sin(q2 + q3 + q4) + 0.39225 * sin(q2 + q3) + 0.09465 * cos(q2 + q3 + q4)) * sin(q1);
  jacobian(2, 2) = -0.0823 * sin(q5) * cos(q2 + q3 + q4) + 0.09465 * sin(q2 + q3 + q4) - 0.39225 * cos(q2 + q3);
  jacobian(3, 2) = sin(q1);
  jacobian(4, 2) = -cos(q1);
  jacobian(5, 2) = 0;

  jacobian(0, 3) = (0.0823 * sin(q5) * sin(q2 + q3 + q4) + 0.09465 * cos(q2 + q3 + q4)) * cos(q1);
  jacobian(1, 3) = (0.0823 * sin(q5) * sin(q2 + q3 + q4) + 0.09465 * cos(q2 + q3 + q4)) * sin(q1);
  jacobian(2, 3) = -0.0823 * sin(q5) * cos(q2 + q3 + q4) + 0.09465 * sin(q2 + q3 + q4);
  jacobian(3, 3) = sin(q1);
  jacobian(4, 3) = -cos(q1);
  jacobian(5, 3) = 0;

  jacobian(0, 4) = -0.0823 * sin(q1) * sin(q5) - 0.0823 * cos(q1) * cos(q5) * cos(q2 + q3 + q4);
  jacobian(1, 4) = -0.0823 * sin(q1) * cos(q5) * cos(q2 + q3 + q4) + 0.0823 * sin(q5) * cos(q1);
  jacobian(2, 4) = -0.0823 * sin(q2 + q3 + q4) * cos(q5);
  jacobian(3, 4) = sin(q2 + q3 + q4) * cos(q1);
  jacobian(4, 4) = sin(q1) * sin(q2 + q3 + q4);
  jacobian(5, 4) = -cos(q2 + q3 + q4);

  jacobian(0, 5) = 0;
  jacobian(1, 5) = 0;
  jacobian(2, 5) = 0;
  jacobian(3, 5) = sin(q1) * cos(q5) - sin(q5) * cos(q1) * cos(q2 + q3 + q4);
  jacobian(4, 5) = -sin(q1) * sin(q5) * cos(q2 + q3 + q4) - cos(q1) * cos(q5);
  jacobian(5, 5) = -sin(q5) * sin(q2 + q3 + q4);

  return jacobian;
}

Matrix UR5::getForceTransformMatrix() {
  // pos转化为反对称算子
  Matrix posVector2SkewMatrix(3, 3);
  posVector2SkewMatrix << 0, -0.05, 0, 0.05, 0, 0, 0, 0, 0;
  // 旋转矩阵
  Matrix rotationMatrix(3, 3);
  rotationMatrix << 1, 0, 0, 0, 1, 0, 0, 0, 1;
  // 力变换矩阵
  forceTransformMatrix.block(0, 0, 3, 3) = forceTransformMatrix.block(3, 3, 3, 3) = rotationMatrix;
  forceTransformMatrix.block(3, 0, 3, 3) = posVector2SkewMatrix * rotationMatrix;
  return forceTransformMatrix;
}

void UR5::initBaseParameterSet() {
  // simulation parameter: ols
  // sumulation: no friction
  baseParmSet1 << -2.334294255, 1.483681688, 8.85E-05, -0.253187693, -0.013157858, -1.499552237, 3.516911842, -0.007208486, 0.766222431, -0.011079468, -0.107262405, 0.040178292, -0.778106928, 1.970331238, -0.00382015, -0.044352643, 0.011754601, 0.001912371, -0.052642479, 0.014188733, -0.002872881, 0.231991236, -0.026056392, -0.014956514, 0.026087888, -0.03798613, -0.061489771, 0.001301895, -0.091755516, 0.028256136, -0.000891333, -0.011801835, 0.014612743, -0.029182398, -0.004179365, -0.003074451, 0.035369162, -0.038082289, 0.0423764, -0.011739182;

  // base parameters of real robot
  // baseParmSet1 << 2.467, -1.7081, -0.015539, 0.37328, -0.084094, 1.4022,
  //     -4.0744, -0.016665, -0.65174, -0.023199, 0.10137, 0.081257,
  //     0.65958, -1.7326, 0.039138, 0.043535, -0.0084179, -0.0098545,
  //     0.00055247, 0.050426, 0.012335, -0.1656, -0.010732, 0.007285,
  //     -0.0071277, 0.021777, 0.022039, -0.010078, 0.043664, 0.00038932,
  //     0.0023759, 0.0039256, -0.00084683, -0.0046768, -0.00050346, 2.501e-05,
  //     0.1504, -0.21965, -0.27477, -0.19484;

  // base friction parameter of real robot
  // baseParmSet2 << 7.2291, 8.5457, 8.4669, 2.1024, 2.0212, 2.3297,
  //     6.2449, 4.8101, 7.6508, 1.0453, 1.5941, 1.1145,
  //     -4.7924, -6.1015, -5.3704, -1.759, -1.3835, -2.1193,
  //     48.78, 21.631, 30.257, 22.788, 20.421, 15.192;
}

Matrix UR5::regressorMatrix(Vector &q, Vector &qd, Vector &qdd, double g) {
  // 轨迹初始化
  double q1 = q(0), d_q1 = qd(0), dd_q1 = qdd(0);
  double q2 = q(1), d_q2 = qd(1), dd_q2 = qdd(1);
  double q3 = q(2), d_q3 = qd(2), dd_q3 = qdd(2);
  double q4 = q(3), d_q4 = qd(3), dd_q4 = qdd(3);
  double q5 = q(4), d_q5 = qd(4), dd_q5 = qdd(4);
  double q6 = q(5), d_q6 = qd(5), dd_q6 = qdd(5);

  // 回归矩阵：通过OpenSymoro计算得到
  // ref: https://github.com/symoro/symoro
  double C1 = cos(q1);
  double S1 = sin(q1);
  double C2 = cos(q2);
  double S2 = sin(q2);
  double C3 = cos(q3);
  double S3 = sin(q3);
  double C4 = cos(q4);
  double S4 = sin(q4);
  double C5 = cos(q5);
  double S5 = sin(q5);
  double C6 = cos(q6);
  double S6 = sin(q6);
  double DV61 = pow(d_q1, 2);
  double W12 = S2 * d_q1;
  double W22 = C2 * d_q1;
  double WP12 = S2 * dd_q1 + W22 * d_q2;
  double WP22 = C2 * dd_q1 - W12 * d_q2;
  double DV12 = pow(W12, 2);
  double DV22 = W12 * W22;
  double DV32 = W12 * d_q2;
  double DV42 = pow(W22, 2);
  double DV52 = W22 * d_q2;
  double DV62 = pow(d_q2, 2);
  double U112 = -DV42 - DV62;
  double U212 = DV22 + dd_q2;
  double U312 = DV32 - WP22;
  double U122 = DV22 - dd_q2;
  double U222 = -DV12 - DV62;
  double U322 = DV52 + WP12;
  double U132 = DV32 + WP22;
  double U232 = DV52 - WP12;
  double U332 = -DV12 - DV42;
  double VP12 = -S2 * g;
  double VP22 = -C2 * g;
  double W13 = C3 * W12 + S3 * W22;
  double W23 = C3 * W22 - S3 * W12;
  double W33 = d_q2 + d_q3;
  double WP13 = C3 * WP12 + S3 * WP22 + W23 * d_q3;
  double WP23 = C3 * WP22 - S3 * WP12 - W13 * d_q3;
  double WP33 = dd_q2 + dd_q3;
  double DV13 = pow(W13, 2);
  double DV23 = W13 * W23;
  double DV33 = W13 * W33;
  double DV43 = pow(W23, 2);
  double DV53 = W23 * W33;
  double DV63 = pow(W33, 2);
  double U113 = -DV43 - DV63;
  double U213 = DV23 + WP33;
  double U313 = DV33 - WP23;
  double U123 = DV23 - WP33;
  double U223 = -DV13 - DV63;
  double U323 = DV53 + WP13;
  double U133 = DV33 + WP23;
  double U233 = DV53 - WP13;
  double U333 = -DV13 - DV43;
  double VSP13 = -0.425 * U112 + VP12;
  double VSP23 = -0.425 * U212 + VP22;
  double VSP33 = -0.425 * U312;
  double VP13 = C3 * VSP13 + S3 * VSP23;
  double VP23 = C3 * VSP23 - S3 * VSP13;
  double W14 = C4 * W13 + S4 * W23;
  double W24 = C4 * W23 - S4 * W13;
  double W34 = W33 + d_q4;
  double WP14 = C4 * WP13 + S4 * WP23 + W24 * d_q4;
  double WP24 = C4 * WP23 - S4 * WP13 - W14 * d_q4;
  double WP34 = WP33 + dd_q4;
  double DV14 = pow(W14, 2);
  double DV24 = W14 * W24;
  double DV34 = W14 * W34;
  double DV44 = pow(W24, 2);
  double DV54 = W24 * W34;
  double DV64 = pow(W34, 2);
  double U114 = -DV44 - DV64;
  double U214 = DV24 + WP34;
  double U314 = DV34 - WP24;
  double U124 = DV24 - WP34;
  double U224 = -DV14 - DV64;
  double U324 = DV54 + WP14;
  double U134 = DV34 + WP24;
  double U234 = DV54 - WP14;
  double U334 = -DV14 - DV44;
  double VSP14 = -0.39225 * U113 + 0.10915 * U133 + VP13;
  double VSP24 = -0.39225 * U213 + 0.10915 * U233 + VP23;
  double VSP34 = -0.39225 * U313 + 0.10915 * U333 + VSP33;
  double VP14 = C4 * VSP14 + S4 * VSP24;
  double VP24 = C4 * VSP24 - S4 * VSP14;
  double W15 = C5 * W14 + S5 * W34;
  double W25 = C5 * W34 - S5 * W14;
  double W35 = -W24 + d_q5;
  double WP15 = C5 * WP14 + S5 * WP34 + W25 * d_q5;
  double WP25 = C5 * WP34 - S5 * WP14 - W15 * d_q5;
  double WP35 = -WP24 + dd_q5;
  double DV15 = pow(W15, 2);
  double DV25 = W15 * W25;
  double DV35 = W15 * W35;
  double DV45 = pow(W25, 2);
  double DV55 = W25 * W35;
  double DV65 = pow(W35, 2);
  double U115 = -DV45 - DV65;
  double U215 = DV25 + WP35;
  double U315 = DV35 - WP25;
  double U125 = DV25 - WP35;
  double U225 = -DV15 - DV65;
  double U325 = DV55 + WP15;
  double U135 = DV35 + WP25;
  double U235 = DV55 - WP15;
  double U335 = -DV15 - DV45;
  double VSP15 = -0.09465 * U124 + VP14;
  double VSP25 = -0.09465 * U224 + VP24;
  double VSP35 = -0.09465 * U324 + VSP34;
  double VP15 = C5 * VSP15 + S5 * VSP35;
  double VP25 = C5 * VSP35 - S5 * VSP15;
  double W16 = C6 * W15 - S6 * W35;
  double W26 = -C6 * W35 - S6 * W15;
  double W36 = W25 + d_q6;
  double WP16 = C6 * WP15 - S6 * WP35 + W26 * d_q6;
  double WP26 = -C6 * WP35 - S6 * WP15 - W16 * d_q6;
  double WP36 = WP25 + dd_q6;
  double DV16 = pow(W16, 2);
  double DV26 = W16 * W26;
  double DV36 = W16 * W36;
  double DV46 = pow(W26, 2);
  double DV56 = W26 * W36;
  double DV66 = pow(W36, 2);
  double U116 = -DV46 - DV66;
  double U216 = DV26 + WP36;
  double U316 = DV36 - WP26;
  double U126 = DV26 - WP36;
  double U226 = -DV16 - DV66;
  double U326 = DV56 + WP16;
  double U136 = DV36 + WP26;
  double U236 = DV56 - WP16;
  double U336 = -DV16 - DV46;
  double VSP16 = 0.0823 * U125 + VP15;
  double VSP26 = 0.0823 * U225 + VP25;
  double VSP36 = 0.0823 * U325 - VSP25;
  double VP16 = C6 * VSP16 - S6 * VSP36;
  double VP26 = -C6 * VSP36 - S6 * VSP16;
  double DE01XX0 = 0;
  double DE02XX0 = 0;
  double DE03XX0 = 0;
  double DN01XX0 = 0;
  double DN02XX0 = 0;
  double DN03XX0 = 0;
  double DE01XY0 = 0;
  double DE02XY0 = 0;
  double DE03XY0 = 0;
  double DN01XY0 = 0;
  double DN02XY0 = 0;
  double DN03XY0 = 0;
  double DE01XZ0 = 0;
  double DE02XZ0 = 0;
  double DE03XZ0 = 0;
  double DN01XZ0 = 0;
  double DN02XZ0 = 0;
  double DN03XZ0 = 0;
  double DE01YY0 = 0;
  double DE02YY0 = 0;
  double DE03YY0 = 0;
  double DN01YY0 = 0;
  double DN02YY0 = 0;
  double DN03YY0 = 0;
  double DE01YZ0 = 0;
  double DE02YZ0 = 0;
  double DE03YZ0 = 0;
  double DN01YZ0 = 0;
  double DN02YZ0 = 0;
  double DN03YZ0 = 0;
  double DE01ZZ0 = 0;
  double DE02ZZ0 = 0;
  double DE03ZZ0 = 0;
  double DN01ZZ0 = 0;
  double DN02ZZ0 = 0;
  double DN03ZZ0 = 0;
  double DE01MX0 = 0;
  double DE02MX0 = 0;
  double DE03MX0 = 0;
  double DN01MX0 = 0;
  double DN02MX0 = g;
  double DN03MX0 = 0;
  double DE01MY0 = 0;
  double DE02MY0 = 0;
  double DE03MY0 = 0;
  double DN01MY0 = -g;
  double DN02MY0 = 0;
  double DN03MY0 = 0;
  double DE01MZ0 = 0;
  double DE02MZ0 = 0;
  double DE03MZ0 = 0;
  double DN01MZ0 = 0;
  double DN02MZ0 = 0;
  double DN03MZ0 = 0;
  double DE01M0 = 0;
  double DE02M0 = 0;
  double DE03M0 = -g;
  double DN01M0 = 0;
  double DN02M0 = 0;
  double DN03M0 = 0;
  double DE01ZZR1 = 0;
  double DE02ZZR1 = 0;
  double DE03ZZR1 = 0;
  double DN01ZZR1 = 0;
  double DN02ZZR1 = 0;
  double DN03ZZR1 = dd_q1;
  double DG1ZZR1 = dd_q1;
  double DG1FS1 = boost::math::sign(d_q1);
  double DG1FV1 = d_q1;
  double N11XXR2 = C2 * WP12 - DV32 * S2;
  double N13XXR2 = C2 * DV32 + S2 * WP12;
  double DE01XXR2 = 0;
  double DE02XXR2 = 0;
  double DE03XXR2 = 0;
  double DN01XXR2 = C1 * N11XXR2 - DV22 * S1;
  double DN02XXR2 = C1 * DV22 + N11XXR2 * S1;
  double DN03XXR2 = N13XXR2;
  double DG1XXR2 = N13XXR2;
  double DG2XXR2 = -DV22;
  double No21XY2 = -W12 * d_q2 + WP22;
  double No22XY2 = W22 * d_q2 + WP12;
  double No23XY2 = pow(W12, 2) - pow(W22, 2);
  double N11XY2 = C2 * No21XY2 - No22XY2 * S2;
  double N13XY2 = C2 * No22XY2 + No21XY2 * S2;
  double DE01XY2 = 0;
  double DE02XY2 = 0;
  double DE03XY2 = 0;
  double DN01XY2 = C1 * N11XY2 + No23XY2 * S1;
  double DN02XY2 = -C1 * No23XY2 + N11XY2 * S1;
  double DN03XY2 = N13XY2;
  double DG1XY2 = N13XY2;
  double DG2XY2 = No23XY2;
  double No21XZR2 = W12 * W22 + dd_q2;
  double No22XZR2 = -pow(W12, 2) + pow(d_q2, 2);
  double No23XZR2 = -W22 * d_q2 + WP12;
  double N11XZR2 = C2 * No21XZR2 - No22XZR2 * S2;
  double N13XZR2 = C2 * No22XZR2 + No21XZR2 * S2;
  double DE01XZR2 = 0;
  double DE02XZR2 = 0;
  double DE03XZR2 = 0;
  double DN01XZR2 = C1 * N11XZR2 + No23XZR2 * S1;
  double DN02XZR2 = -C1 * No23XZR2 + N11XZR2 * S1;
  double DN03XZR2 = N13XZR2;
  double DG1XZR2 = N13XZR2;
  double DG2XZR2 = No23XZR2;
  double No21YZ2 = pow(W22, 2) - pow(d_q2, 2);
  double No22YZ2 = -W12 * W22 + dd_q2;
  double No23YZ2 = W12 * d_q2 + WP22;
  double N11YZ2 = C2 * No21YZ2 - No22YZ2 * S2;
  double N13YZ2 = C2 * No22YZ2 + No21YZ2 * S2;
  double DE01YZ2 = 0;
  double DE02YZ2 = 0;
  double DE03YZ2 = 0;
  double DN01YZ2 = C1 * N11YZ2 + No23YZ2 * S1;
  double DN02YZ2 = -C1 * No23YZ2 + N11YZ2 * S1;
  double DN03YZ2 = N13YZ2;
  double DG1YZ2 = N13YZ2;
  double DG2YZ2 = No23YZ2;
  double N11ZZR2 = C2 * DV52 + DV32 * S2;
  double N13ZZR2 = -C2 * DV32 + DV52 * S2;
  double DE01ZZR2 = 0;
  double DE02ZZR2 = 0;
  double DE03ZZR2 = 0;
  double DN01ZZR2 = C1 * N11ZZR2 + S1 * dd_q2;
  double DN02ZZR2 = -C1 * dd_q2 + N11ZZR2 * S1;
  double DN03ZZR2 = N13ZZR2;
  double DG1ZZR2 = N13ZZR2;
  double DG2ZZR2 = dd_q2;
  double FDI21MXR2 = C2 * U112 - S2 * U212;
  double FDI23MXR2 = C2 * U212 + S2 * U112;
  double FDI11MXR2 = C1 * FDI21MXR2 + S1 * U312;
  double FDI12MXR2 = -C1 * U312 + FDI21MXR2 * S1;
  double DE01MXR2 = FDI11MXR2;
  double DE02MXR2 = FDI12MXR2;
  double DE03MXR2 = FDI23MXR2;
  double DN01MXR2 = -0.08916 * FDI12MXR2 + S1 * VP22;
  double DN02MXR2 = -C1 * VP22 + 0.08916 * FDI11MXR2;
  double DN03MXR2 = 0;
  double DG1MXR2 = 0;
  double DG2MXR2 = VP22;
  double FDI21MY2 = C2 * U122 - S2 * U222;
  double FDI23MY2 = C2 * U222 + S2 * U122;
  double FDI11MY2 = C1 * FDI21MY2 + S1 * U322;
  double FDI12MY2 = -C1 * U322 + FDI21MY2 * S1;
  double DE01MY2 = FDI11MY2;
  double DE02MY2 = FDI12MY2;
  double DE03MY2 = FDI23MY2;
  double DN01MY2 = -0.08916 * FDI12MY2 - S1 * VP12;
  double DN02MY2 = C1 * VP12 + 0.08916 * FDI11MY2;
  double DN03MY2 = 0;
  double DG1MY2 = 0;
  double DG2MY2 = -VP12;
  double DG2FS2 = boost::math::sign(d_q2);
  double DG2FV2 = d_q2;
  double N21XXR3 = C3 * WP13 - DV33 * S3;
  double N22XXR3 = C3 * DV33 + S3 * WP13;
  double N11XXR3 = C2 * N21XXR3 - N22XXR3 * S2;
  double N13XXR3 = C2 * N22XXR3 + N21XXR3 * S2;
  double DE01XXR3 = 0;
  double DE02XXR3 = 0;
  double DE03XXR3 = 0;
  double DN01XXR3 = C1 * N11XXR3 - DV23 * S1;
  double DN02XXR3 = C1 * DV23 + N11XXR3 * S1;
  double DN03XXR3 = N13XXR3;
  double DG1XXR3 = N13XXR3;
  double DG2XXR3 = -DV23;
  double DG3XXR3 = -DV23;
  double No31XY3 = -W13 * W33 + WP23;
  double No32XY3 = W23 * W33 + WP13;
  double No33XY3 = pow(W13, 2) - pow(W23, 2);
  double N21XY3 = C3 * No31XY3 - No32XY3 * S3;
  double N22XY3 = C3 * No32XY3 + No31XY3 * S3;
  double N11XY3 = C2 * N21XY3 - N22XY3 * S2;
  double N13XY3 = C2 * N22XY3 + N21XY3 * S2;
  double DE01XY3 = 0;
  double DE02XY3 = 0;
  double DE03XY3 = 0;
  double DN01XY3 = C1 * N11XY3 + No33XY3 * S1;
  double DN02XY3 = -C1 * No33XY3 + N11XY3 * S1;
  double DN03XY3 = N13XY3;
  double DG1XY3 = N13XY3;
  double DG2XY3 = No33XY3;
  double DG3XY3 = No33XY3;
  double No31XZR3 = W13 * W23 + WP33;
  double No32XZR3 = -pow(W13, 2) + pow(W33, 2);
  double No33XZR3 = -W23 * W33 + WP13;
  double N21XZR3 = C3 * No31XZR3 - No32XZR3 * S3;
  double N22XZR3 = C3 * No32XZR3 + No31XZR3 * S3;
  double N11XZR3 = C2 * N21XZR3 - N22XZR3 * S2;
  double N13XZR3 = C2 * N22XZR3 + N21XZR3 * S2;
  double DE01XZR3 = 0;
  double DE02XZR3 = 0;
  double DE03XZR3 = 0;
  double DN01XZR3 = C1 * N11XZR3 + No33XZR3 * S1;
  double DN02XZR3 = -C1 * No33XZR3 + N11XZR3 * S1;
  double DN03XZR3 = N13XZR3;
  double DG1XZR3 = N13XZR3;
  double DG2XZR3 = No33XZR3;
  double DG3XZR3 = No33XZR3;
  double No31YZ3 = pow(W23, 2) - pow(W33, 2);
  double No32YZ3 = -W13 * W23 + WP33;
  double No33YZ3 = W13 * W33 + WP23;
  double N21YZ3 = C3 * No31YZ3 - No32YZ3 * S3;
  double N22YZ3 = C3 * No32YZ3 + No31YZ3 * S3;
  double N11YZ3 = C2 * N21YZ3 - N22YZ3 * S2;
  double N13YZ3 = C2 * N22YZ3 + N21YZ3 * S2;
  double DE01YZ3 = 0;
  double DE02YZ3 = 0;
  double DE03YZ3 = 0;
  double DN01YZ3 = C1 * N11YZ3 + No33YZ3 * S1;
  double DN02YZ3 = -C1 * No33YZ3 + N11YZ3 * S1;
  double DN03YZ3 = N13YZ3;
  double DG1YZ3 = N13YZ3;
  double DG2YZ3 = No33YZ3;
  double DG3YZ3 = No33YZ3;
  double N21ZZR3 = C3 * DV53 + DV33 * S3;
  double N22ZZR3 = -C3 * DV33 + DV53 * S3;
  double N11ZZR3 = C2 * N21ZZR3 - N22ZZR3 * S2;
  double N13ZZR3 = C2 * N22ZZR3 + N21ZZR3 * S2;
  double DE01ZZR3 = 0;
  double DE02ZZR3 = 0;
  double DE03ZZR3 = 0;
  double DN01ZZR3 = C1 * N11ZZR3 + S1 * WP33;
  double DN02ZZR3 = -C1 * WP33 + N11ZZR3 * S1;
  double DN03ZZR3 = N13ZZR3;
  double DG1ZZR3 = N13ZZR3;
  double DG2ZZR3 = WP33;
  double DG3ZZR3 = WP33;
  double FDI31MXR3 = C3 * U113 - S3 * U213;
  double FDI32MXR3 = C3 * U213 + S3 * U113;
  double N21MXR3 = S3 * VSP33;
  double N22MXR3 = -C3 * VSP33 + 0.425 * U313;
  double N23MXR3 = -0.425 * FDI32MXR3 + VP23;
  double FDI21MXR3 = C2 * FDI31MXR3 - FDI32MXR3 * S2;
  double FDI23MXR3 = C2 * FDI32MXR3 + FDI31MXR3 * S2;
  double N11MXR3 = C2 * N21MXR3 - N22MXR3 * S2;
  double N13MXR3 = C2 * N22MXR3 + N21MXR3 * S2;
  double FDI11MXR3 = C1 * FDI21MXR3 + S1 * U313;
  double FDI12MXR3 = -C1 * U313 + FDI21MXR3 * S1;
  double DE01MXR3 = FDI11MXR3;
  double DE02MXR3 = FDI12MXR3;
  double DE03MXR3 = FDI23MXR3;
  double DN01MXR3 = C1 * N11MXR3 - 0.08916 * FDI12MXR3 + N23MXR3 * S1;
  double DN02MXR3 = -C1 * N23MXR3 + 0.08916 * FDI11MXR3 + N11MXR3 * S1;
  double DN03MXR3 = N13MXR3;
  double DG1MXR3 = N13MXR3;
  double DG2MXR3 = N23MXR3;
  double DG3MXR3 = VP23;
  double FDI31MY3 = C3 * U123 - S3 * U223;
  double FDI32MY3 = C3 * U223 + S3 * U123;
  double N21MY3 = C3 * VSP33;
  double N22MY3 = S3 * VSP33 + 0.425 * U323;
  double N23MY3 = -0.425 * FDI32MY3 - VP13;
  double FDI21MY3 = C2 * FDI31MY3 - FDI32MY3 * S2;
  double FDI23MY3 = C2 * FDI32MY3 + FDI31MY3 * S2;
  double N11MY3 = C2 * N21MY3 - N22MY3 * S2;
  double N13MY3 = C2 * N22MY3 + N21MY3 * S2;
  double FDI11MY3 = C1 * FDI21MY3 + S1 * U323;
  double FDI12MY3 = -C1 * U323 + FDI21MY3 * S1;
  double DE01MY3 = FDI11MY3;
  double DE02MY3 = FDI12MY3;
  double DE03MY3 = FDI23MY3;
  double DN01MY3 = C1 * N11MY3 - 0.08916 * FDI12MY3 + N23MY3 * S1;
  double DN02MY3 = -C1 * N23MY3 + 0.08916 * FDI11MY3 + N11MY3 * S1;
  double DN03MY3 = N13MY3;
  double DG1MY3 = N13MY3;
  double DG2MY3 = N23MY3;
  double DG3MY3 = -VP13;
  double DG3IA3 = dd_q3;
  double DG3FS3 = boost::math::sign(d_q3);
  double DG3FV3 = d_q3;
  double N31XXR4 = C4 * WP14 - DV34 * S4;
  double N32XXR4 = C4 * DV34 + S4 * WP14;
  double N21XXR4 = C3 * N31XXR4 - N32XXR4 * S3;
  double N22XXR4 = C3 * N32XXR4 + N31XXR4 * S3;
  double N11XXR4 = C2 * N21XXR4 - N22XXR4 * S2;
  double N13XXR4 = C2 * N22XXR4 + N21XXR4 * S2;
  double DE01XXR4 = 0;
  double DE02XXR4 = 0;
  double DE03XXR4 = 0;
  double DN01XXR4 = C1 * N11XXR4 - DV24 * S1;
  double DN02XXR4 = C1 * DV24 + N11XXR4 * S1;
  double DN03XXR4 = N13XXR4;
  double DG1XXR4 = N13XXR4;
  double DG2XXR4 = -DV24;
  double DG3XXR4 = -DV24;
  double DG4XXR4 = -DV24;
  double No41XY4 = -W14 * W34 + WP24;
  double No42XY4 = W24 * W34 + WP14;
  double No43XY4 = pow(W14, 2) - pow(W24, 2);
  double N31XY4 = C4 * No41XY4 - No42XY4 * S4;
  double N32XY4 = C4 * No42XY4 + No41XY4 * S4;
  double N21XY4 = C3 * N31XY4 - N32XY4 * S3;
  double N22XY4 = C3 * N32XY4 + N31XY4 * S3;
  double N11XY4 = C2 * N21XY4 - N22XY4 * S2;
  double N13XY4 = C2 * N22XY4 + N21XY4 * S2;
  double DE01XY4 = 0;
  double DE02XY4 = 0;
  double DE03XY4 = 0;
  double DN01XY4 = C1 * N11XY4 + No43XY4 * S1;
  double DN02XY4 = -C1 * No43XY4 + N11XY4 * S1;
  double DN03XY4 = N13XY4;
  double DG1XY4 = N13XY4;
  double DG2XY4 = No43XY4;
  double DG3XY4 = No43XY4;
  double DG4XY4 = No43XY4;
  double No41XZ4 = W14 * W24 + WP34;
  double No42XZ4 = -pow(W14, 2) + pow(W34, 2);
  double No43XZ4 = -W24 * W34 + WP14;
  double N31XZ4 = C4 * No41XZ4 - No42XZ4 * S4;
  double N32XZ4 = C4 * No42XZ4 + No41XZ4 * S4;
  double N21XZ4 = C3 * N31XZ4 - N32XZ4 * S3;
  double N22XZ4 = C3 * N32XZ4 + N31XZ4 * S3;
  double N11XZ4 = C2 * N21XZ4 - N22XZ4 * S2;
  double N13XZ4 = C2 * N22XZ4 + N21XZ4 * S2;
  double DE01XZ4 = 0;
  double DE02XZ4 = 0;
  double DE03XZ4 = 0;
  double DN01XZ4 = C1 * N11XZ4 + No43XZ4 * S1;
  double DN02XZ4 = -C1 * No43XZ4 + N11XZ4 * S1;
  double DN03XZ4 = N13XZ4;
  double DG1XZ4 = N13XZ4;
  double DG2XZ4 = No43XZ4;
  double DG3XZ4 = No43XZ4;
  double DG4XZ4 = No43XZ4;
  double No41YZ4 = pow(W24, 2) - pow(W34, 2);
  double No42YZ4 = -W14 * W24 + WP34;
  double No43YZ4 = W14 * W34 + WP24;
  double N31YZ4 = C4 * No41YZ4 - No42YZ4 * S4;
  double N32YZ4 = C4 * No42YZ4 + No41YZ4 * S4;
  double N21YZ4 = C3 * N31YZ4 - N32YZ4 * S3;
  double N22YZ4 = C3 * N32YZ4 + N31YZ4 * S3;
  double N11YZ4 = C2 * N21YZ4 - N22YZ4 * S2;
  double N13YZ4 = C2 * N22YZ4 + N21YZ4 * S2;
  double DE01YZ4 = 0;
  double DE02YZ4 = 0;
  double DE03YZ4 = 0;
  double DN01YZ4 = C1 * N11YZ4 + No43YZ4 * S1;
  double DN02YZ4 = -C1 * No43YZ4 + N11YZ4 * S1;
  double DN03YZ4 = N13YZ4;
  double DG1YZ4 = N13YZ4;
  double DG2YZ4 = No43YZ4;
  double DG3YZ4 = No43YZ4;
  double DG4YZ4 = No43YZ4;
  double N31ZZR4 = C4 * DV54 + DV34 * S4;
  double N32ZZR4 = -C4 * DV34 + DV54 * S4;
  double N21ZZR4 = C3 * N31ZZR4 - N32ZZR4 * S3;
  double N22ZZR4 = C3 * N32ZZR4 + N31ZZR4 * S3;
  double N11ZZR4 = C2 * N21ZZR4 - N22ZZR4 * S2;
  double N13ZZR4 = C2 * N22ZZR4 + N21ZZR4 * S2;
  double DE01ZZR4 = 0;
  double DE02ZZR4 = 0;
  double DE03ZZR4 = 0;
  double DN01ZZR4 = C1 * N11ZZR4 + S1 * WP34;
  double DN02ZZR4 = -C1 * WP34 + N11ZZR4 * S1;
  double DN03ZZR4 = N13ZZR4;
  double DG1ZZR4 = N13ZZR4;
  double DG2ZZR4 = WP34;
  double DG3ZZR4 = WP34;
  double DG4ZZR4 = WP34;
  double FDI41MX4 = C4 * U114 - S4 * U214;
  double FDI42MX4 = C4 * U214 + S4 * U114;
  double N31MX4 = -0.10915 * FDI42MX4 + S4 * VSP34;
  double N32MX4 = -C4 * VSP34 + 0.10915 * FDI41MX4 + 0.39225 * U314;
  double N33MX4 = -0.39225 * FDI42MX4 + VP24;
  double FDI31MX4 = C3 * FDI41MX4 - FDI42MX4 * S3;
  double FDI32MX4 = C3 * FDI42MX4 + FDI41MX4 * S3;
  double N21MX4 = C3 * N31MX4 - N32MX4 * S3;
  double N22MX4 = C3 * N32MX4 + N31MX4 * S3 + 0.425 * U314;
  double N23MX4 = -0.425 * FDI32MX4 + N33MX4;
  double FDI21MX4 = C2 * FDI31MX4 - FDI32MX4 * S2;
  double FDI23MX4 = C2 * FDI32MX4 + FDI31MX4 * S2;
  double N11MX4 = C2 * N21MX4 - N22MX4 * S2;
  double N13MX4 = C2 * N22MX4 + N21MX4 * S2;
  double FDI11MX4 = C1 * FDI21MX4 + S1 * U314;
  double FDI12MX4 = -C1 * U314 + FDI21MX4 * S1;
  double DE01MX4 = FDI11MX4;
  double DE02MX4 = FDI12MX4;
  double DE03MX4 = FDI23MX4;
  double DN01MX4 = C1 * N11MX4 - 0.08916 * FDI12MX4 + N23MX4 * S1;
  double DN02MX4 = -C1 * N23MX4 + 0.08916 * FDI11MX4 + N11MX4 * S1;
  double DN03MX4 = N13MX4;
  double DG1MX4 = N13MX4;
  double DG2MX4 = N23MX4;
  double DG3MX4 = N33MX4;
  double DG4MX4 = VP24;
  double FDI41MYR4 = C4 * U124 - S4 * U224;
  double FDI42MYR4 = C4 * U224 + S4 * U124;
  double N31MYR4 = C4 * VSP34 - 0.10915 * FDI42MYR4;
  double N32MYR4 = 0.10915 * FDI41MYR4 + S4 * VSP34 + 0.39225 * U324;
  double N33MYR4 = -0.39225 * FDI42MYR4 - VP14;
  double FDI31MYR4 = C3 * FDI41MYR4 - FDI42MYR4 * S3;
  double FDI32MYR4 = C3 * FDI42MYR4 + FDI41MYR4 * S3;
  double N21MYR4 = C3 * N31MYR4 - N32MYR4 * S3;
  double N22MYR4 = C3 * N32MYR4 + N31MYR4 * S3 + 0.425 * U324;
  double N23MYR4 = -0.425 * FDI32MYR4 + N33MYR4;
  double FDI21MYR4 = C2 * FDI31MYR4 - FDI32MYR4 * S2;
  double FDI23MYR4 = C2 * FDI32MYR4 + FDI31MYR4 * S2;
  double N11MYR4 = C2 * N21MYR4 - N22MYR4 * S2;
  double N13MYR4 = C2 * N22MYR4 + N21MYR4 * S2;
  double FDI11MYR4 = C1 * FDI21MYR4 + S1 * U324;
  double FDI12MYR4 = -C1 * U324 + FDI21MYR4 * S1;
  double DE01MYR4 = FDI11MYR4;
  double DE02MYR4 = FDI12MYR4;
  double DE03MYR4 = FDI23MYR4;
  double DN01MYR4 = C1 * N11MYR4 - 0.08916 * FDI12MYR4 + N23MYR4 * S1;
  double DN02MYR4 = -C1 * N23MYR4 + 0.08916 * FDI11MYR4 + N11MYR4 * S1;
  double DN03MYR4 = N13MYR4;
  double DG1MYR4 = N13MYR4;
  double DG2MYR4 = N23MYR4;
  double DG3MYR4 = N33MYR4;
  double DG4MYR4 = -VP14;
  double DG4IA4 = dd_q4;
  double DG4FS4 = boost::math::sign(d_q4);
  double DG4FV4 = d_q4;
  double N41XXR5 = C5 * WP15 - DV35 * S5;
  double N43XXR5 = C5 * DV35 + S5 * WP15;
  double N31XXR5 = C4 * N41XXR5 - DV25 * S4;
  double N32XXR5 = C4 * DV25 + N41XXR5 * S4;
  double N21XXR5 = C3 * N31XXR5 - N32XXR5 * S3;
  double N22XXR5 = C3 * N32XXR5 + N31XXR5 * S3;
  double N11XXR5 = C2 * N21XXR5 - N22XXR5 * S2;
  double N13XXR5 = C2 * N22XXR5 + N21XXR5 * S2;
  double DE01XXR5 = 0;
  double DE02XXR5 = 0;
  double DE03XXR5 = 0;
  double DN01XXR5 = C1 * N11XXR5 + N43XXR5 * S1;
  double DN02XXR5 = -C1 * N43XXR5 + N11XXR5 * S1;
  double DN03XXR5 = N13XXR5;
  double DG1XXR5 = N13XXR5;
  double DG2XXR5 = N43XXR5;
  double DG3XXR5 = N43XXR5;
  double DG4XXR5 = N43XXR5;
  double DG5XXR5 = -DV25;
  double No51XY5 = -W15 * W35 + WP25;
  double No52XY5 = W25 * W35 + WP15;
  double No53XY5 = pow(W15, 2) - pow(W25, 2);
  double N41XY5 = C5 * No51XY5 - No52XY5 * S5;
  double N43XY5 = C5 * No52XY5 + No51XY5 * S5;
  double N31XY5 = C4 * N41XY5 + No53XY5 * S4;
  double N32XY5 = -C4 * No53XY5 + N41XY5 * S4;
  double N21XY5 = C3 * N31XY5 - N32XY5 * S3;
  double N22XY5 = C3 * N32XY5 + N31XY5 * S3;
  double N11XY5 = C2 * N21XY5 - N22XY5 * S2;
  double N13XY5 = C2 * N22XY5 + N21XY5 * S2;
  double DE01XY5 = 0;
  double DE02XY5 = 0;
  double DE03XY5 = 0;
  double DN01XY5 = C1 * N11XY5 + N43XY5 * S1;
  double DN02XY5 = -C1 * N43XY5 + N11XY5 * S1;
  double DN03XY5 = N13XY5;
  double DG1XY5 = N13XY5;
  double DG2XY5 = N43XY5;
  double DG3XY5 = N43XY5;
  double DG4XY5 = N43XY5;
  double DG5XY5 = No53XY5;
  double No51XZ5 = W15 * W25 + WP35;
  double No52XZ5 = -pow(W15, 2) + pow(W35, 2);
  double No53XZ5 = -W25 * W35 + WP15;
  double N41XZ5 = C5 * No51XZ5 - No52XZ5 * S5;
  double N43XZ5 = C5 * No52XZ5 + No51XZ5 * S5;
  double N31XZ5 = C4 * N41XZ5 + No53XZ5 * S4;
  double N32XZ5 = -C4 * No53XZ5 + N41XZ5 * S4;
  double N21XZ5 = C3 * N31XZ5 - N32XZ5 * S3;
  double N22XZ5 = C3 * N32XZ5 + N31XZ5 * S3;
  double N11XZ5 = C2 * N21XZ5 - N22XZ5 * S2;
  double N13XZ5 = C2 * N22XZ5 + N21XZ5 * S2;
  double DE01XZ5 = 0;
  double DE02XZ5 = 0;
  double DE03XZ5 = 0;
  double DN01XZ5 = C1 * N11XZ5 + N43XZ5 * S1;
  double DN02XZ5 = -C1 * N43XZ5 + N11XZ5 * S1;
  double DN03XZ5 = N13XZ5;
  double DG1XZ5 = N13XZ5;
  double DG2XZ5 = N43XZ5;
  double DG3XZ5 = N43XZ5;
  double DG4XZ5 = N43XZ5;
  double DG5XZ5 = No53XZ5;
  double No51YZ5 = pow(W25, 2) - pow(W35, 2);
  double No52YZ5 = -W15 * W25 + WP35;
  double No53YZ5 = W15 * W35 + WP25;
  double N41YZ5 = C5 * No51YZ5 - No52YZ5 * S5;
  double N43YZ5 = C5 * No52YZ5 + No51YZ5 * S5;
  double N31YZ5 = C4 * N41YZ5 + No53YZ5 * S4;
  double N32YZ5 = -C4 * No53YZ5 + N41YZ5 * S4;
  double N21YZ5 = C3 * N31YZ5 - N32YZ5 * S3;
  double N22YZ5 = C3 * N32YZ5 + N31YZ5 * S3;
  double N11YZ5 = C2 * N21YZ5 - N22YZ5 * S2;
  double N13YZ5 = C2 * N22YZ5 + N21YZ5 * S2;
  double DE01YZ5 = 0;
  double DE02YZ5 = 0;
  double DE03YZ5 = 0;
  double DN01YZ5 = C1 * N11YZ5 + N43YZ5 * S1;
  double DN02YZ5 = -C1 * N43YZ5 + N11YZ5 * S1;
  double DN03YZ5 = N13YZ5;
  double DG1YZ5 = N13YZ5;
  double DG2YZ5 = N43YZ5;
  double DG3YZ5 = N43YZ5;
  double DG4YZ5 = N43YZ5;
  double DG5YZ5 = No53YZ5;
  double N41ZZR5 = C5 * DV55 + DV35 * S5;
  double N43ZZR5 = -C5 * DV35 + DV55 * S5;
  double N31ZZR5 = C4 * N41ZZR5 + S4 * WP35;
  double N32ZZR5 = -C4 * WP35 + N41ZZR5 * S4;
  double N21ZZR5 = C3 * N31ZZR5 - N32ZZR5 * S3;
  double N22ZZR5 = C3 * N32ZZR5 + N31ZZR5 * S3;
  double N11ZZR5 = C2 * N21ZZR5 - N22ZZR5 * S2;
  double N13ZZR5 = C2 * N22ZZR5 + N21ZZR5 * S2;
  double DE01ZZR5 = 0;
  double DE02ZZR5 = 0;
  double DE03ZZR5 = 0;
  double DN01ZZR5 = C1 * N11ZZR5 + N43ZZR5 * S1;
  double DN02ZZR5 = -C1 * N43ZZR5 + N11ZZR5 * S1;
  double DN03ZZR5 = N13ZZR5;
  double DG1ZZR5 = N13ZZR5;
  double DG2ZZR5 = N43ZZR5;
  double DG3ZZR5 = N43ZZR5;
  double DG4ZZR5 = N43ZZR5;
  double DG5ZZR5 = WP35;
  double FDI51MX5 = C5 * U115 - S5 * U215;
  double FDI53MX5 = C5 * U215 + S5 * U115;
  double N41MX5 = -0.09465 * FDI53MX5 - S5 * VSP25;
  double N43MX5 = C5 * VSP25 + 0.09465 * FDI51MX5;
  double FDI41MX5 = C4 * FDI51MX5 + S4 * U315;
  double FDI42MX5 = -C4 * U315 + FDI51MX5 * S4;
  double N31MX5 = C4 * N41MX5 - 0.10915 * FDI42MX5 + S4 * VP25;
  double N32MX5 = -C4 * VP25 + 0.10915 * FDI41MX5 + 0.39225 * FDI53MX5 + N41MX5 * S4;
  double N33MX5 = -0.39225 * FDI42MX5 + N43MX5;
  double FDI31MX5 = C3 * FDI41MX5 - FDI42MX5 * S3;
  double FDI32MX5 = C3 * FDI42MX5 + FDI41MX5 * S3;
  double N21MX5 = C3 * N31MX5 - N32MX5 * S3;
  double N22MX5 = C3 * N32MX5 + 0.425 * FDI53MX5 + N31MX5 * S3;
  double N23MX5 = -0.425 * FDI32MX5 + N33MX5;
  double FDI21MX5 = C2 * FDI31MX5 - FDI32MX5 * S2;
  double FDI23MX5 = C2 * FDI32MX5 + FDI31MX5 * S2;
  double N11MX5 = C2 * N21MX5 - N22MX5 * S2;
  double N13MX5 = C2 * N22MX5 + N21MX5 * S2;
  double FDI11MX5 = C1 * FDI21MX5 + FDI53MX5 * S1;
  double FDI12MX5 = -C1 * FDI53MX5 + FDI21MX5 * S1;
  double DE01MX5 = FDI11MX5;
  double DE02MX5 = FDI12MX5;
  double DE03MX5 = FDI23MX5;
  double DN01MX5 = C1 * N11MX5 - 0.08916 * FDI12MX5 + N23MX5 * S1;
  double DN02MX5 = -C1 * N23MX5 + 0.08916 * FDI11MX5 + N11MX5 * S1;
  double DN03MX5 = N13MX5;
  double DG1MX5 = N13MX5;
  double DG2MX5 = N23MX5;
  double DG3MX5 = N33MX5;
  double DG4MX5 = N43MX5;
  double DG5MX5 = VP25;
  double FDI51MYR5 = C5 * U125 - S5 * U225;
  double FDI53MYR5 = C5 * U225 + S5 * U125;
  double N41MYR5 = -C5 * VSP25 - 0.09465 * FDI53MYR5;
  double N43MYR5 = 0.09465 * FDI51MYR5 - S5 * VSP25;
  double FDI41MYR5 = C4 * FDI51MYR5 + S4 * U325;
  double FDI42MYR5 = -C4 * U325 + FDI51MYR5 * S4;
  double N31MYR5 = C4 * N41MYR5 - 0.10915 * FDI42MYR5 - S4 * VP15;
  double N32MYR5 = C4 * VP15 + 0.10915 * FDI41MYR5 + 0.39225 * FDI53MYR5 + N41MYR5 * S4;
  double N33MYR5 = -0.39225 * FDI42MYR5 + N43MYR5;
  double FDI31MYR5 = C3 * FDI41MYR5 - FDI42MYR5 * S3;
  double FDI32MYR5 = C3 * FDI42MYR5 + FDI41MYR5 * S3;
  double N21MYR5 = C3 * N31MYR5 - N32MYR5 * S3;
  double N22MYR5 = C3 * N32MYR5 + 0.425 * FDI53MYR5 + N31MYR5 * S3;
  double N23MYR5 = -0.425 * FDI32MYR5 + N33MYR5;
  double FDI21MYR5 = C2 * FDI31MYR5 - FDI32MYR5 * S2;
  double FDI23MYR5 = C2 * FDI32MYR5 + FDI31MYR5 * S2;
  double N11MYR5 = C2 * N21MYR5 - N22MYR5 * S2;
  double N13MYR5 = C2 * N22MYR5 + N21MYR5 * S2;
  double FDI11MYR5 = C1 * FDI21MYR5 + FDI53MYR5 * S1;
  double FDI12MYR5 = -C1 * FDI53MYR5 + FDI21MYR5 * S1;
  double DE01MYR5 = FDI11MYR5;
  double DE02MYR5 = FDI12MYR5;
  double DE03MYR5 = FDI23MYR5;
  double DN01MYR5 = C1 * N11MYR5 - 0.08916 * FDI12MYR5 + N23MYR5 * S1;
  double DN02MYR5 = -C1 * N23MYR5 + 0.08916 * FDI11MYR5 + N11MYR5 * S1;
  double DN03MYR5 = N13MYR5;
  double DG1MYR5 = N13MYR5;
  double DG2MYR5 = N23MYR5;
  double DG3MYR5 = N33MYR5;
  double DG4MYR5 = N43MYR5;
  double DG5MYR5 = -VP15;
  double DG5IA5 = dd_q5;
  double DG5FS5 = boost::math::sign(d_q5);
  double DG5FV5 = d_q5;
  double N51XXR6 = C6 * WP16 - DV36 * S6;
  double N53XXR6 = -C6 * DV36 - S6 * WP16;
  double N41XXR6 = C5 * N51XXR6 + DV26 * S5;
  double N43XXR6 = -C5 * DV26 + N51XXR6 * S5;
  double N31XXR6 = C4 * N41XXR6 + N53XXR6 * S4;
  double N32XXR6 = -C4 * N53XXR6 + N41XXR6 * S4;
  double N21XXR6 = C3 * N31XXR6 - N32XXR6 * S3;
  double N22XXR6 = C3 * N32XXR6 + N31XXR6 * S3;
  double N11XXR6 = C2 * N21XXR6 - N22XXR6 * S2;
  double N13XXR6 = C2 * N22XXR6 + N21XXR6 * S2;
  double DE01XXR6 = 0;
  double DE02XXR6 = 0;
  double DE03XXR6 = 0;
  double DN01XXR6 = C1 * N11XXR6 + N43XXR6 * S1;
  double DN02XXR6 = -C1 * N43XXR6 + N11XXR6 * S1;
  double DN03XXR6 = N13XXR6;
  double DG1XXR6 = N13XXR6;
  double DG2XXR6 = N43XXR6;
  double DG3XXR6 = N43XXR6;
  double DG4XXR6 = N43XXR6;
  double DG5XXR6 = N53XXR6;
  double DG6XXR6 = -DV26;
  double No61XY6 = -W16 * W36 + WP26;
  double No62XY6 = W26 * W36 + WP16;
  double No63XY6 = pow(W16, 2) - pow(W26, 2);
  double N51XY6 = C6 * No61XY6 - No62XY6 * S6;
  double N53XY6 = -C6 * No62XY6 - No61XY6 * S6;
  double N41XY6 = C5 * N51XY6 - No63XY6 * S5;
  double N43XY6 = C5 * No63XY6 + N51XY6 * S5;
  double N31XY6 = C4 * N41XY6 + N53XY6 * S4;
  double N32XY6 = -C4 * N53XY6 + N41XY6 * S4;
  double N21XY6 = C3 * N31XY6 - N32XY6 * S3;
  double N22XY6 = C3 * N32XY6 + N31XY6 * S3;
  double N11XY6 = C2 * N21XY6 - N22XY6 * S2;
  double N13XY6 = C2 * N22XY6 + N21XY6 * S2;
  double DE01XY6 = 0;
  double DE02XY6 = 0;
  double DE03XY6 = 0;
  double DN01XY6 = C1 * N11XY6 + N43XY6 * S1;
  double DN02XY6 = -C1 * N43XY6 + N11XY6 * S1;
  double DN03XY6 = N13XY6;
  double DG1XY6 = N13XY6;
  double DG2XY6 = N43XY6;
  double DG3XY6 = N43XY6;
  double DG4XY6 = N43XY6;
  double DG5XY6 = N53XY6;
  double DG6XY6 = No63XY6;
  double No61XZ6 = W16 * W26 + WP36;
  double No62XZ6 = -pow(W16, 2) + pow(W36, 2);
  double No63XZ6 = -W26 * W36 + WP16;
  double N51XZ6 = C6 * No61XZ6 - No62XZ6 * S6;
  double N53XZ6 = -C6 * No62XZ6 - No61XZ6 * S6;
  double N41XZ6 = C5 * N51XZ6 - No63XZ6 * S5;
  double N43XZ6 = C5 * No63XZ6 + N51XZ6 * S5;
  double N31XZ6 = C4 * N41XZ6 + N53XZ6 * S4;
  double N32XZ6 = -C4 * N53XZ6 + N41XZ6 * S4;
  double N21XZ6 = C3 * N31XZ6 - N32XZ6 * S3;
  double N22XZ6 = C3 * N32XZ6 + N31XZ6 * S3;
  double N11XZ6 = C2 * N21XZ6 - N22XZ6 * S2;
  double N13XZ6 = C2 * N22XZ6 + N21XZ6 * S2;
  double DE01XZ6 = 0;
  double DE02XZ6 = 0;
  double DE03XZ6 = 0;
  double DN01XZ6 = C1 * N11XZ6 + N43XZ6 * S1;
  double DN02XZ6 = -C1 * N43XZ6 + N11XZ6 * S1;
  double DN03XZ6 = N13XZ6;
  double DG1XZ6 = N13XZ6;
  double DG2XZ6 = N43XZ6;
  double DG3XZ6 = N43XZ6;
  double DG4XZ6 = N43XZ6;
  double DG5XZ6 = N53XZ6;
  double DG6XZ6 = No63XZ6;
  double No61YZ6 = pow(W26, 2) - pow(W36, 2);
  double No62YZ6 = -W16 * W26 + WP36;
  double No63YZ6 = W16 * W36 + WP26;
  double N51YZ6 = C6 * No61YZ6 - No62YZ6 * S6;
  double N53YZ6 = -C6 * No62YZ6 - No61YZ6 * S6;
  double N41YZ6 = C5 * N51YZ6 - No63YZ6 * S5;
  double N43YZ6 = C5 * No63YZ6 + N51YZ6 * S5;
  double N31YZ6 = C4 * N41YZ6 + N53YZ6 * S4;
  double N32YZ6 = -C4 * N53YZ6 + N41YZ6 * S4;
  double N21YZ6 = C3 * N31YZ6 - N32YZ6 * S3;
  double N22YZ6 = C3 * N32YZ6 + N31YZ6 * S3;
  double N11YZ6 = C2 * N21YZ6 - N22YZ6 * S2;
  double N13YZ6 = C2 * N22YZ6 + N21YZ6 * S2;
  double DE01YZ6 = 0;
  double DE02YZ6 = 0;
  double DE03YZ6 = 0;
  double DN01YZ6 = C1 * N11YZ6 + N43YZ6 * S1;
  double DN02YZ6 = -C1 * N43YZ6 + N11YZ6 * S1;
  double DN03YZ6 = N13YZ6;
  double DG1YZ6 = N13YZ6;
  double DG2YZ6 = N43YZ6;
  double DG3YZ6 = N43YZ6;
  double DG4YZ6 = N43YZ6;
  double DG5YZ6 = N53YZ6;
  double DG6YZ6 = No63YZ6;
  double N51ZZ6 = C6 * DV56 + DV36 * S6;
  double N53ZZ6 = C6 * DV36 - DV56 * S6;
  double N41ZZ6 = C5 * N51ZZ6 - S5 * WP36;
  double N43ZZ6 = C5 * WP36 + N51ZZ6 * S5;
  double N31ZZ6 = C4 * N41ZZ6 + N53ZZ6 * S4;
  double N32ZZ6 = -C4 * N53ZZ6 + N41ZZ6 * S4;
  double N21ZZ6 = C3 * N31ZZ6 - N32ZZ6 * S3;
  double N22ZZ6 = C3 * N32ZZ6 + N31ZZ6 * S3;
  double N11ZZ6 = C2 * N21ZZ6 - N22ZZ6 * S2;
  double N13ZZ6 = C2 * N22ZZ6 + N21ZZ6 * S2;
  double DE01ZZ6 = 0;
  double DE02ZZ6 = 0;
  double DE03ZZ6 = 0;
  double DN01ZZ6 = C1 * N11ZZ6 + N43ZZ6 * S1;
  double DN02ZZ6 = -C1 * N43ZZ6 + N11ZZ6 * S1;
  double DN03ZZ6 = N13ZZ6;
  double DG1ZZ6 = N13ZZ6;
  double DG2ZZ6 = N43ZZ6;
  double DG3ZZ6 = N43ZZ6;
  double DG4ZZ6 = N43ZZ6;
  double DG5ZZ6 = N53ZZ6;
  double DG6ZZ6 = WP36;
  double FDI61MX6 = C6 * U116 - S6 * U216;
  double FDI63MX6 = -C6 * U216 - S6 * U116;
  double N51MX6 = 0.0823 * FDI63MX6 + S6 * VSP26;
  double N53MX6 = C6 * VSP26 - 0.0823 * FDI61MX6;
  double FDI51MX6 = C5 * FDI61MX6 - S5 * U316;
  double FDI53MX6 = C5 * U316 + FDI61MX6 * S5;
  double N41MX6 = C5 * N51MX6 - 0.09465 * FDI53MX6 - S5 * VP26;
  double N43MX6 = C5 * VP26 + 0.09465 * FDI51MX6 + N51MX6 * S5;
  double FDI41MX6 = C4 * FDI51MX6 + FDI63MX6 * S4;
  double FDI42MX6 = -C4 * FDI63MX6 + FDI51MX6 * S4;
  double N31MX6 = C4 * N41MX6 - 0.10915 * FDI42MX6 + N53MX6 * S4;
  double N32MX6 = -C4 * N53MX6 + 0.10915 * FDI41MX6 + 0.39225 * FDI53MX6 + N41MX6 * S4;
  double N33MX6 = -0.39225 * FDI42MX6 + N43MX6;
  double FDI31MX6 = C3 * FDI41MX6 - FDI42MX6 * S3;
  double FDI32MX6 = C3 * FDI42MX6 + FDI41MX6 * S3;
  double N21MX6 = C3 * N31MX6 - N32MX6 * S3;
  double N22MX6 = C3 * N32MX6 + 0.425 * FDI53MX6 + N31MX6 * S3;
  double N23MX6 = -0.425 * FDI32MX6 + N33MX6;
  double FDI21MX6 = C2 * FDI31MX6 - FDI32MX6 * S2;
  double FDI23MX6 = C2 * FDI32MX6 + FDI31MX6 * S2;
  double N11MX6 = C2 * N21MX6 - N22MX6 * S2;
  double N13MX6 = C2 * N22MX6 + N21MX6 * S2;
  double FDI11MX6 = C1 * FDI21MX6 + FDI53MX6 * S1;
  double FDI12MX6 = -C1 * FDI53MX6 + FDI21MX6 * S1;
  double DE01MX6 = FDI11MX6;
  double DE02MX6 = FDI12MX6;
  double DE03MX6 = FDI23MX6;
  double DN01MX6 = C1 * N11MX6 - 0.08916 * FDI12MX6 + N23MX6 * S1;
  double DN02MX6 = -C1 * N23MX6 + 0.08916 * FDI11MX6 + N11MX6 * S1;
  double DN03MX6 = N13MX6;
  double DG1MX6 = N13MX6;
  double DG2MX6 = N23MX6;
  double DG3MX6 = N33MX6;
  double DG4MX6 = N43MX6;
  double DG5MX6 = N53MX6;
  double DG6MX6 = VP26;
  double FDI61MY6 = C6 * U126 - S6 * U226;
  double FDI63MY6 = -C6 * U226 - S6 * U126;
  double N51MY6 = C6 * VSP26 + 0.0823 * FDI63MY6;
  double N53MY6 = -0.0823 * FDI61MY6 - S6 * VSP26;
  double FDI51MY6 = C5 * FDI61MY6 - S5 * U326;
  double FDI53MY6 = C5 * U326 + FDI61MY6 * S5;
  double N41MY6 = C5 * N51MY6 - 0.09465 * FDI53MY6 + S5 * VP16;
  double N43MY6 = -C5 * VP16 + 0.09465 * FDI51MY6 + N51MY6 * S5;
  double FDI41MY6 = C4 * FDI51MY6 + FDI63MY6 * S4;
  double FDI42MY6 = -C4 * FDI63MY6 + FDI51MY6 * S4;
  double N31MY6 = C4 * N41MY6 - 0.10915 * FDI42MY6 + N53MY6 * S4;
  double N32MY6 = -C4 * N53MY6 + 0.10915 * FDI41MY6 + 0.39225 * FDI53MY6 + N41MY6 * S4;
  double N33MY6 = -0.39225 * FDI42MY6 + N43MY6;
  double FDI31MY6 = C3 * FDI41MY6 - FDI42MY6 * S3;
  double FDI32MY6 = C3 * FDI42MY6 + FDI41MY6 * S3;
  double N21MY6 = C3 * N31MY6 - N32MY6 * S3;
  double N22MY6 = C3 * N32MY6 + 0.425 * FDI53MY6 + N31MY6 * S3;
  double N23MY6 = -0.425 * FDI32MY6 + N33MY6;
  double FDI21MY6 = C2 * FDI31MY6 - FDI32MY6 * S2;
  double FDI23MY6 = C2 * FDI32MY6 + FDI31MY6 * S2;
  double N11MY6 = C2 * N21MY6 - N22MY6 * S2;
  double N13MY6 = C2 * N22MY6 + N21MY6 * S2;
  double FDI11MY6 = C1 * FDI21MY6 + FDI53MY6 * S1;
  double FDI12MY6 = -C1 * FDI53MY6 + FDI21MY6 * S1;
  double DE01MY6 = FDI11MY6;
  double DE02MY6 = FDI12MY6;
  double DE03MY6 = FDI23MY6;
  double DN01MY6 = C1 * N11MY6 - 0.08916 * FDI12MY6 + N23MY6 * S1;
  double DN02MY6 = -C1 * N23MY6 + 0.08916 * FDI11MY6 + N11MY6 * S1;
  double DN03MY6 = N13MY6;
  double DG1MY6 = N13MY6;
  double DG2MY6 = N23MY6;
  double DG3MY6 = N33MY6;
  double DG4MY6 = N43MY6;
  double DG5MY6 = N53MY6;
  double DG6MY6 = -VP16;
  double DG6IA6 = dd_q6;
  double DG6FS6 = boost::math::sign(d_q6);
  double DG6FV6 = d_q6;

  // 初始化回归矩阵
  Matrix phi(UR5DOF, baseParamSet1Size);
  phi.setZero();

  // link1;
  phi(0, 0) = DG1ZZR1;
  // link2;
  phi(0, 1) = DG1XXR2;
  phi(0, 2) = DG1XY2;
  phi(0, 3) = DG1XZR2;
  phi(0, 4) = DG1YZ2;
  phi(0, 5) = DG1ZZR2;
  phi(0, 6) = DG1MXR2;
  phi(0, 7) = DG1MY2;
  // link3;
  phi(0, 8) = DG1XXR3;
  phi(0, 9) = DG1XY3;
  phi(0, 10) = DG1XZR3;
  phi(0, 11) = DG1YZ3;
  phi(0, 12) = DG1ZZR3;
  phi(0, 13) = DG1MXR3;
  phi(0, 14) = DG1MY3;
  // link4;
  phi(0, 15) = DG1XXR4;
  phi(0, 16) = DG1XY4;
  phi(0, 17) = DG1XZ4;
  phi(0, 18) = DG1YZ4;
  phi(0, 19) = DG1ZZR4;
  phi(0, 20) = DG1MX4;
  phi(0, 21) = DG1MYR4;
  // link5;
  phi(0, 22) = DG1XXR5;
  phi(0, 23) = DG1XY5;
  phi(0, 24) = DG1XZ5;
  phi(0, 25) = DG1YZ5;
  phi(0, 26) = DG1ZZR5;
  phi(0, 27) = DG1MX5;
  phi(0, 28) = DG1MYR5;
  // link6;
  phi(0, 29) = DG1XXR6;
  phi(0, 30) = DG1XY6;
  phi(0, 31) = DG1XZ6;
  phi(0, 32) = DG1YZ6;
  phi(0, 33) = DG1ZZ6;
  phi(0, 34) = DG1MX6;
  phi(0, 35) = DG1MY6;
  // IA;
  phi(0, 36) = 0;
  phi(0, 37) = 0;
  phi(0, 38) = 0;
  phi(0, 39) = 0;
  // // Fs
  // phi(0, 40) = DG1FS1;
  // phi(0, 41) = 0;
  // phi(0, 42) = 0;
  // phi(0, 43) = 0;
  // phi(0, 44) = 0;
  // phi(0, 45) = 0;
  // // Fv
  // phi(0, 46) = DG1FV1;
  // phi(0, 47) = 0;
  // phi(0, 48) = 0;
  // phi(0, 49) = 0;
  // phi(0, 50) = 0;
  // phi(0, 51) = 0;

  // // nonlinear
  // phi(0, 52) = stribeckParameter(gammaStribeck[0], d_q1);
  // phi(0, 53) = 0;
  // phi(0, 54) = 0;
  // phi(0, 55) = 0;
  // phi(0, 56) = 0;
  // phi(0, 57) = 0;

  //  关节2;
  // link1;
  phi(1, 0) = 0;
  // link2;
  phi(1, 1) = DG2XXR2;
  phi(1, 2) = DG2XY2;
  phi(1, 3) = DG2XZR2;
  phi(1, 4) = DG2YZ2;
  phi(1, 5) = DG2ZZR2;
  phi(1, 6) = DG2MXR2;
  phi(1, 7) = DG2MY2;
  // link3;
  phi(1, 8) = DG2XXR3;
  phi(1, 9) = DG2XY3;
  phi(1, 10) = DG2XZR3;
  phi(1, 11) = DG2YZ3;
  phi(1, 12) = DG2ZZR3;
  phi(1, 13) = DG2MXR3;
  phi(1, 14) = DG2MY3;
  // link4;
  phi(1, 15) = DG2XXR4;
  phi(1, 16) = DG2XY4;
  phi(1, 17) = DG2XZ4;
  phi(1, 18) = DG2YZ4;
  phi(1, 19) = DG2ZZR4;
  phi(1, 20) = DG2MX4;
  phi(1, 21) = DG2MYR4;
  // link5;
  phi(1, 22) = DG2XXR5;
  phi(1, 23) = DG2XY5;
  phi(1, 24) = DG2XZ5;
  phi(1, 25) = DG2YZ5;
  phi(1, 26) = DG2ZZR5;
  phi(1, 27) = DG2MX5;
  phi(1, 28) = DG2MYR5;
  // link6;
  phi(1, 29) = DG2XXR6;
  phi(1, 30) = DG2XY6;
  phi(1, 31) = DG2XZ6;
  phi(1, 32) = DG2YZ6;
  phi(1, 33) = DG2ZZ6;
  phi(1, 34) = DG2MX6;
  phi(1, 35) = DG2MY6;
  // IA;
  phi(1, 36) = 0;
  phi(1, 37) = 0;
  phi(1, 38) = 0;
  phi(1, 39) = 0;
  // // Fs
  // phi(1, 40) = 0;
  // phi(1, 41) = DG2FS2;
  // phi(1, 42) = 0;
  // phi(1, 43) = 0;
  // phi(1, 44) = 0;
  // phi(1, 45) = 0;
  // // Fv
  // phi(1, 46) = 0;
  // phi(1, 47) = DG2FV2;
  // phi(1, 48) = 0;
  // phi(1, 49) = 0;
  // phi(1, 50) = 0;
  // phi(1, 51) = 0;
  // // nonlinear
  // phi(1, 52) = 0;
  // phi(1, 53) = stribeckParameter(gammaStribeck[1], d_q2);
  // phi(1, 54) = 0;
  // phi(1, 55) = 0;
  // phi(1, 56) = 0;
  // phi(1, 57) = 0;

  //  关节3;
  // link1;
  phi(2, 0) = 0;
  // link2;
  phi(2, 1) = 0;
  phi(2, 2) = 0;
  phi(2, 3) = 0;
  phi(2, 4) = 0;
  phi(2, 5) = 0;
  phi(2, 6) = 0;
  phi(2, 7) = 0;
  // link3;
  phi(2, 8) = DG3XXR3;
  phi(2, 9) = DG3XY3;
  phi(2, 10) = DG3XZR3;
  phi(2, 11) = DG3YZ3;
  phi(2, 12) = DG3ZZR3;
  phi(2, 13) = DG3MXR3;
  phi(2, 14) = DG3MY3;
  // link4;
  phi(2, 15) = DG3XXR4;
  phi(2, 16) = DG3XY4;
  phi(2, 17) = DG3XZ4;
  phi(2, 18) = DG3YZ4;
  phi(2, 19) = DG3ZZR4;
  phi(2, 20) = DG3MX4;
  phi(2, 21) = DG3MYR4;
  // link5;
  phi(2, 22) = DG3XXR5;
  phi(2, 23) = DG3XY5;
  phi(2, 24) = DG3XZ5;
  phi(2, 25) = DG3YZ5;
  phi(2, 26) = DG3ZZR5;
  phi(2, 27) = DG3MX5;
  phi(2, 28) = DG3MYR5;
  // link6;
  phi(2, 29) = DG3XXR6;
  phi(2, 30) = DG3XY6;
  phi(2, 31) = DG3XZ6;
  phi(2, 32) = DG3YZ6;
  phi(2, 33) = DG3ZZ6;
  phi(2, 34) = DG3MX6;
  phi(2, 35) = DG3MY6;
  // IA;
  phi(2, 36) = DG3IA3;
  phi(2, 37) = 0;
  phi(2, 38) = 0;
  phi(2, 39) = 0;
  // // Fs
  // phi(2, 40) = 0;
  // phi(2, 41) = 0;
  // phi(2, 42) = DG3FS3;
  // phi(2, 43) = 0;
  // phi(2, 44) = 0;
  // phi(2, 45) = 0;
  // // Fv
  // phi(2, 46) = 0;
  // phi(2, 47) = 0;
  // phi(2, 48) = DG3FV3;
  // phi(2, 49) = 0;
  // phi(2, 50) = 0;
  // phi(2, 52) = 0;
  // // nonlinear
  // phi(2, 52) = 0;
  // phi(2, 53) = 0;
  // phi(2, 54) = stribeckParameter(gammaStribeck[2], d_q3);
  // phi(2, 55) = 0;
  // phi(2, 56) = 0;
  // phi(2, 57) = 0;

  // //  关节4;
  // link1;
  phi(3, 0) = 0;
  // link2;
  phi(3, 1) = 0;
  phi(3, 2) = 0;
  phi(3, 3) = 0;
  phi(3, 4) = 0;
  phi(3, 5) = 0;
  phi(3, 6) = 0;
  phi(3, 7) = 0;
  // link3;
  phi(3, 8) = 0;
  phi(3, 9) = 0;
  phi(3, 10) = 0;
  phi(3, 11) = 0;
  phi(3, 12) = 0;
  phi(3, 13) = 0;
  phi(3, 14) = 0;
  // link4;
  phi(3, 15) = DG4XXR4;
  phi(3, 16) = DG4XY4;
  phi(3, 17) = DG4XZ4;
  phi(3, 18) = DG4YZ4;
  phi(3, 19) = DG4ZZR4;
  phi(3, 20) = DG4MX4;
  phi(3, 21) = DG4MYR4;
  // link5;
  phi(3, 22) = DG4XXR5;
  phi(3, 23) = DG4XY5;
  phi(3, 24) = DG4XZ5;
  phi(3, 25) = DG4YZ5;
  phi(3, 26) = DG4ZZR5;
  phi(3, 27) = DG4MX5;
  phi(3, 28) = DG4MYR5;
  // link6;
  phi(3, 29) = DG4XXR6;
  phi(3, 30) = DG4XY6;
  phi(3, 31) = DG4XZ6;
  phi(3, 32) = DG4YZ6;
  phi(3, 33) = DG4ZZ6;
  phi(3, 34) = DG4MX6;
  phi(3, 35) = DG4MY6;
  // IA;
  phi(3, 36) = 0;
  phi(3, 37) = DG4IA4;
  phi(3, 38) = 0;
  phi(3, 39) = 0;
  // // Fs
  // phi(3, 40) = 0;
  // phi(3, 41) = 0;
  // phi(3, 42) = 0;
  // phi(3, 43) = DG4FS4;
  // phi(3, 44) = 0;
  // phi(3, 45) = 0;
  // // Fv
  // phi(3, 46) = 0;
  // phi(3, 47) = 0;
  // phi(3, 48) = 0;
  // phi(3, 49) = DG4FV4;
  // phi(3, 50) = 0;
  // phi(3, 51) = 0;
  // // nonlinear
  // phi(3, 52) = 0;
  // phi(3, 53) = 0;
  // phi(3, 54) = 0;
  // phi(3, 55) = stribeckParameter(gammaStribeck[3], d_q4);
  // phi(3, 56) = 0;
  // phi(3, 57) = 0;

  // 关节5;
  // link1;
  phi(4, 0) = 0;
  // link2;
  phi(4, 1) = 0;
  phi(4, 2) = 0;
  phi(4, 3) = 0;
  phi(4, 4) = 0;
  phi(4, 5) = 0;
  phi(4, 6) = 0;
  phi(4, 7) = 0;
  // link3;
  phi(4, 8) = 0;
  phi(4, 9) = 0;
  phi(4, 10) = 0;
  phi(4, 11) = 0;
  phi(4, 12) = 0;
  phi(4, 13) = 0;
  phi(4, 14) = 0;
  // link4;
  phi(4, 15) = 0;
  phi(4, 16) = 0;
  phi(4, 17) = 0;
  phi(4, 18) = 0;
  phi(4, 19) = 0;
  phi(4, 20) = 0;
  phi(4, 21) = 0;
  // link5;
  phi(4, 22) = DG5XXR5;
  phi(4, 23) = DG5XY5;
  phi(4, 24) = DG5XZ5;
  phi(4, 25) = DG5YZ5;
  phi(4, 26) = DG5ZZR5;
  phi(4, 27) = DG5MX5;
  phi(4, 28) = DG5MYR5;
  // link6;
  phi(4, 29) = DG5XXR6;
  phi(4, 30) = DG5XY6;
  phi(4, 31) = DG5XZ6;
  phi(4, 32) = DG5YZ6;
  phi(4, 33) = DG5ZZ6;
  phi(4, 34) = DG5MX6;
  phi(4, 35) = DG5MY6;
  // IA;
  phi(4, 36) = 0;
  phi(4, 37) = 0;
  phi(4, 38) = DG5IA5;
  phi(4, 39) = 0;
  // // Fs
  // phi(4, 40) = 0;
  // phi(4, 41) = 0;
  // phi(4, 42) = 0;
  // phi(4, 43) = 0;
  // phi(4, 44) = DG5FS5;
  // phi(4, 45) = 0;
  // // Fv
  // phi(4, 46) = 0;
  // phi(4, 47) = 0;
  // phi(4, 48) = 0;
  // phi(4, 49) = 0;
  // phi(4, 50) = DG5FV5;
  // phi(4, 51) = 0;
  // // nonlinear
  // phi(4, 52) = 0;
  // phi(4, 53) = 0;
  // phi(4, 54) = 0;
  // phi(4, 55) = 0;
  // phi(4, 56) = stribeckParameter(gammaStribeck[4], d_q5);
  // phi(4, 57) = 0;

  // 关节6;
  // link1;
  phi(5, 0) = 0;
  // link2;
  phi(5, 1) = 0;
  phi(5, 2) = 0;
  phi(5, 3) = 0;
  phi(5, 4) = 0;
  phi(5, 5) = 0;
  phi(5, 6) = 0;
  phi(5, 7) = 0;
  // link3;
  phi(5, 8) = 0;
  phi(5, 9) = 0;
  phi(5, 10) = 0;
  phi(5, 11) = 0;
  phi(5, 12) = 0;
  phi(5, 13) = 0;
  phi(5, 14) = 0;
  // link4;
  phi(5, 15) = 0;
  phi(5, 16) = 0;
  phi(5, 17) = 0;
  phi(5, 18) = 0;
  phi(5, 19) = 0;
  phi(5, 20) = 0;
  phi(5, 21) = 0;
  // link5;
  phi(5, 22) = 0;
  phi(5, 23) = 0;
  phi(5, 24) = 0;
  phi(5, 25) = 0;
  phi(5, 26) = 0;
  phi(5, 27) = 0;
  phi(5, 28) = 0;
  // link6;
  phi(5, 29) = DG6XXR6;
  phi(5, 30) = DG6XY6;
  phi(5, 31) = DG6XZ6;
  phi(5, 32) = DG6YZ6;
  phi(5, 33) = DG6ZZ6;
  phi(5, 34) = DG6MX6;
  phi(5, 35) = DG6MY6;
  // IA;
  phi(5, 36) = 0;
  phi(5, 37) = 0;
  phi(5, 38) = 0;
  phi(5, 39) = DG6IA6;
  // // Fs
  // phi(5, 40) = 0;
  // phi(5, 41) = 0;
  // phi(5, 42) = 0;
  // phi(5, 43) = 0;
  // phi(5, 44) = 0;
  // phi(5, 45) = DG6FS6;
  // // Fv
  // phi(5, 46) = 0;
  // phi(5, 47) = 0;
  // phi(5, 48) = 0;
  // phi(5, 49) = 0;
  // phi(5, 50) = 0;
  // phi(5, 51) = DG6FV6;
  // // nonlinear
  // phi(5, 52) = 0;
  // phi(5, 53) = 0;
  // phi(5, 54) = 0;
  // phi(5, 55) = 0;
  // phi(5, 56) = 0;
  // phi(5, 57) = stribeckParameter(gammaStribeck[5], d_q6);
  return phi;
}